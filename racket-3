;selection
;in C based programming languages we have:
;if     -  if has two branches
;switch -  switch has many branches
;in racket we have:
;if     - which has two branches
;cond   - which has many branches
;syntax of cond:
;(cond [(cond-expl) exp1][(cond-exp2]...[else else-expl])
;recall: define
;syntax of define:  (define (functname formal-params) exp)
;syntax of function call: (functname actual-params)
(define (number->word x)
  (cond
    [(= x 1) "one"] ; we write instead of x = 1, we write = x 1
    [(= x 2) "two"]
    [(= x 3) "three"]))
; we test the new function
(writeln (number->word 1))
(writeln (number->word 2))
(define (word->number x)
  (cond
    [(equal? x "one") 1]
    [(equal? x 2) "two"]
    [(equal? x 3) "three"]))
(writeln (word->number "one"))
; list is a data structure
; a list consists of two parts: head and tail
; head is the very first element of the list
; tail is the rest
; a tail is always a list
; to creat a list we use the keyword: list
(define mylist1 (list 1 2 3))
(writeln mylist1)
; Head is accesed by command: first
; Tails is accesed by command: rest
(writeln (first mylist1))
(writeln (rest mylist1))            ;(2,3)
(writeln (rest (rest mylist1)))      ;(3)
; Because the tail of a list is always a list.
(writeln (rest (rest (rest mylist1))))  ;()
; The tail of (list 3) is the empty list.
; empty can be written in 4 different ways:
; empty
; null
; (list )
; '()
; (list 1 2 3) can be written in several different ways:
; (list 1 2 3)
; '(1 2 3)
; (cons 1 (list 2 3))
; (cons 1 '(2 3)
; cons is called: "list constructor"
; syntax of cons: (cons head tail)
; example:        (cons 1 empty) = (list 1)
(define mylist2 (cons 1 (cons 2 empty)))
(writeln mylist2)           ;output = (1 2)

(define mylist3 (cons "apple"
                   (cons "PC"
                      (cons "notebook" empty))))
(writeln mylist3)           ;output = ("apple" "PC" "notebook")
; list is a recursive data structure, because
; the tail of a list is always a list
; since list is a recursive data structure we should
; process it in a recursive way

; first we study what is recursive function
; fact(3) = 3 * 2 * 1
; fact(4) = 4 * 3 * 2 * 1 = 4 * fact(3)
; fact(5) = 5 * 4 * 3 * 2 * 1 = 5 * fact(4)
; fact(6) = 6 * 5 * 4 * 3 * 2 * 1 = 6 * fact(5)
;in general:
; fact(n) = n * fact(n-1) ; this is recursion
; but recursion should be stopped
; fact(0) = 1    ; this branch is not recursive.
;                  this is the one that stops recursion.
(define (fact n)
 ( if (= n 0)
     1                          ; non recursive branch
     (* n (fact (- n 1)))))     ; recursive branch
(writeln (fact 4))
(define (fact n)
   (cond
     [(= n 0) 1]
     [else (* n (fact (- n 1)))]))
(writeln (fact 5))

; fibo(1) = 1
; fibo(2) = 2
; fibo(n) = fibo(n-1) + fibo(n-2)
